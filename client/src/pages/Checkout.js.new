import React, { useState, useEffect } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import toast from 'react-hot-toast';
import axios from 'axios';
import { paymentEndpoints } from '../services/apis';
import { loadScript } from '../utils/helpers';

const Checkout = () => {
    const location = useLocation();
    const navigate = useNavigate();
    const [loading, setLoading] = useState(false);
    const [orderData, setOrderData] = useState(null);
    const [quantity, setQuantity] = useState(1);
    
    // Get listing details from location state
    const listing = location.state?.listing;

    useEffect(() => {
        if (!listing) {
            toast.error('No listing selected. Redirecting to marketplace.');
            navigate('/marketplace');
        }
    }, [listing, navigate]);

    useEffect(() => {
        // Load Razorpay script
        loadScript('https://checkout.razorpay.com/v1/checkout.js');
    }, []);

    const handleQuantityChange = (e) => {
        const value = parseInt(e.target.value);
        if (!isNaN(value) && value > 0 && value <= (listing?.availableQuantity || 0)) {
            setQuantity(value);
        }
    };

    const handleCreateOrder = async () => {
        if (!listing) {
            toast.error('No listing selected');
            return;
        }

        if (quantity <= 0 || quantity > listing.availableQuantity) {
            toast.error('Invalid quantity');
            return;
        }

        try {
            setLoading(true);
            console.log('Creating order with params:', { listingId: listing._id, quantity });
            
            const response = await axios.post(
                paymentEndpoints.CREATE_ORDER_API,
                {
                    listingId: listing._id,
                    quantity: quantity
                },
                {
                    headers: {
                        Authorization: `Bearer ${localStorage.getItem('token')}`
                    }
                }
            );

            console.log('Order created successfully:', response.data);
            setOrderData(response.data);
            displayRazorpay(response.data);
        } catch (error) {
            console.error('Error creating order - Full error:', error);
            console.error('Error response data:', error.response?.data);
            console.error('Error status:', error.response?.status);
            toast.error(error.response?.data?.message || 'Error creating order');
        } finally {
            setLoading(false);
        }
    };

    const displayRazorpay = async (data) => {
        try {
            // Check if Razorpay SDK is loaded
            if (!window.Razorpay) {
                await loadScript('https://checkout.razorpay.com/v1/checkout.js');
                if (!window.Razorpay) {
                    toast.error('Razorpay SDK failed to load. Please try again later');
                    return;
                }
            }
            
            console.log("Order data received:", data);
            
            if (!data.keyId) {
                toast.error("Razorpay API key not provided by server");
                return;
            }
            
            // Create Razorpay options
            const options = {
                key: data.keyId,
                amount: data.amount,
                currency: data.currency || 'INR',
                name: 'Green Hydrogen Trade',
                description: `Purchase ${data.listing.title}`,
                order_id: data.orderId,
                handler: async function(response) {
                    try {
                        console.log("Payment successful, verifying payment...", response);
                        
                        const paymentData = {
                            razorpayOrderId: response.razorpay_order_id,
                            razorpayPaymentId: response.razorpay_payment_id,
                            razorpaySignature: response.razorpay_signature,
                            listingId: listing._id,
                            quantity: quantity
                        };

                        const result = await axios.post(
                            paymentEndpoints.VERIFY_PAYMENT_API,
                            paymentData,
                            {
                                headers: {
                                    Authorization: `Bearer ${localStorage.getItem('token')}`
                                }
                            }
                        );

                        if (result.data.success) {
                            toast.success('Payment successful!');
                            // Navigate to payment status page with transaction details
                            navigate('/payment/status', { 
                                state: { transaction: result.data.transaction } 
                            });
                        } else {
                            toast.error('Payment verification failed.');
                        }
                    } catch (error) {
                        toast.error('Failed to verify payment');
                        console.error('Payment verification error:', error);
                    }
                },
                prefill: {
                    name: localStorage.getItem('userName') || '',
                    email: localStorage.getItem('userEmail') || ''
                },
                theme: {
                    color: '#10b981'
                },
                notes: {
                    address: 'Green Hydrogen Trade, India'
                },
                // Enable all payment methods
                method: {
                    netbanking: true,
                    card: true,
                    wallet: true,
                    upi: true
                }
            };

            const razorpayInstance = new window.Razorpay(options);
            razorpayInstance.open();
        } catch (error) {
            toast.error('Error initializing Razorpay');
            console.error('Razorpay error:', error);
        }
    };

    if (!listing) {
        return <div className="text-center p-8">Loading...</div>;
    }

    return (
        <div className="max-w-4xl mx-auto p-6">
            <h2 className="text-2xl font-bold mb-6">Checkout</h2>
            
            <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                <h3 className="text-xl font-semibold mb-4">Order Summary</h3>
                
                <div className="flex flex-col md:flex-row gap-6">
                    <div className="md:w-1/2">
                        <div className="mb-4">
                            <span className="block text-gray-600 mb-1">Listing</span>
                            <span className="font-medium">{listing.title}</span>
                        </div>
                        
                        <div className="mb-4">
                            <span className="block text-gray-600 mb-1">Producer</span>
                            <span className="font-medium">{listing.producer?.name || 'Unknown'}</span>
                        </div>
                        
                        <div className="mb-4">
                            <span className="block text-gray-600 mb-1">Energy Source</span>
                            <span className="font-medium">{listing.energySource}</span>
                        </div>
                        
                        <div className="mb-4">
                            <span className="block text-gray-600 mb-1">Available Quantity</span>
                            <span className="font-medium">{listing.availableQuantity} {listing.unit}</span>
                        </div>
                        
                        <div className="mb-4">
                            <label className="block text-gray-600 mb-1" htmlFor="quantity">
                                Quantity
                            </label>
                            <input
                                type="number"
                                id="quantity"
                                min="1"
                                max={listing.availableQuantity}
                                value={quantity}
                                onChange={handleQuantityChange}
                                className="border rounded w-24 py-1 px-2"
                            />
                            <span className="ml-2">{listing.unit}</span>
                        </div>
                    </div>
                    
                    <div className="md:w-1/2 bg-gray-50 p-4 rounded">
                        <h4 className="font-semibold mb-3">Price Details</h4>
                        
                        <div className="flex justify-between mb-2">
                            <span>Price per unit:</span>
                            <span>₹{listing.price.toFixed(2)}</span>
                        </div>
                        
                        <div className="flex justify-between mb-2">
                            <span>Quantity:</span>
                            <span>{quantity} {listing.unit}</span>
                        </div>
                        
                        <hr className="my-2" />
                        
                        <div className="flex justify-between font-semibold">
                            <span>Total Amount:</span>
                            <span>₹{(listing.price * quantity).toFixed(2)}</span>
                        </div>
                    </div>
                </div>
            </div>
            
            <div className="flex justify-end">
                <button
                    onClick={() => navigate('/marketplace')}
                    className="px-6 py-2 mr-3 border border-gray-300 rounded hover:bg-gray-100"
                >
                    Back to Marketplace
                </button>
                <button
                    onClick={handleCreateOrder}
                    disabled={loading}
                    className="px-6 py-2 bg-emerald-600 text-white rounded hover:bg-emerald-700 disabled:opacity-50"
                >
                    {loading ? 'Processing...' : 'Proceed to Payment'}
                </button>
            </div>
        </div>
    );
};

export default Checkout;
