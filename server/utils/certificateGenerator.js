const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');

class CertificateGenerator {
    static async generateCertificate(transaction, producer, listing) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument({
                    size: 'A4',
                    margins: {
                        top: 50,
                        bottom: 50,
                        left: 50,
                        right: 50
                    }
                });

                const filename = `certificate-${transaction.certificateNumber}.pdf`;
                const filepath = path.join(__dirname, '../uploads', filename);
                const stream = fs.createWriteStream(filepath);

                doc.pipe(stream);

                // Header
                doc.fontSize(24)
                   .font('Helvetica-Bold')
                   .text('HYDROGEN CERTIFICATION', { align: 'center' });

                doc.moveDown(0.5);
                doc.fontSize(16)
                   .font('Helvetica')
                   .text('Certificate of Green Hydrogen Purchase', { align: 'center' });

                doc.moveDown(2);

                // Certificate Details
                doc.fontSize(14)
                   .font('Helvetica-Bold')
                   .text('Certificate Number:', 50, 150);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(transaction.certificateNumber, 200, 150);

                doc.moveDown(1);

                doc.fontSize(14)
                   .font('Helvetica-Bold')
                   .text('Issue Date:', 50);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(new Date(transaction.transactionDate).toLocaleDateString(), 200);

                doc.moveDown(2);

                // Transaction Details
                doc.fontSize(16)
                   .font('Helvetica-Bold')
                   .text('Transaction Details', { underline: true });

                doc.moveDown(1);

                const details = [
                    ['Buyer:', transaction.buyer.name || 'N/A'],
                    ['Producer:', producer.companyName || producer.name],
                    ['Hydrogen Quantity:', `${transaction.quantity} ${transaction.unit}`],
                    ['Energy Source:', listing.energySource],
                    ['Price per Unit:', `₹${transaction.pricePerUnit}`],
                    ['Total Amount:', `₹${transaction.totalAmount}`],
                    ['Payment Status:', transaction.paymentStatus]
                ];

                details.forEach(([label, value]) => {
                    doc.fontSize(12)
                       .font('Helvetica-Bold')
                       .text(label, 50);

                    doc.fontSize(12)
                       .font('Helvetica')
                       .text(value, 200);

                    doc.moveDown(0.5);
                });

                doc.moveDown(2);

                // Environmental Impact
                doc.fontSize(16)
                   .font('Helvetica-Bold')
                   .text('Environmental Impact', { underline: true });

                doc.moveDown(1);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(`This certificate represents the purchase of ${transaction.quantity} ${transaction.unit} of green hydrogen produced using ${listing.energySource} energy.`);

                doc.moveDown(1);

                if (listing.carbonIntensity) {
                    doc.text(`Carbon Intensity: ${listing.carbonIntensity} gCO2/kWh`);
                }

                if (listing.renewablePercentage) {
                    doc.text(`Renewable Energy Percentage: ${listing.renewablePercentage}%`);
                }

                doc.moveDown(2);

                // Footer
                doc.fontSize(10)
                   .font('Helvetica')
                   .text('This certificate is generated by HydrogenCertify and serves as proof of green hydrogen purchase for compliance and reporting purposes.', { align: 'center' });

                doc.moveDown(1);

                doc.fontSize(10)
                   .font('Helvetica')
                   .text('For verification, please contact: support@hydrogencertify.com', { align: 'center' });

                // QR Code placeholder (in a real app, you'd generate an actual QR code)
                doc.moveDown(2);
                doc.fontSize(8)
                   .font('Helvetica')
                   .text('QR Code: ' + transaction.certificateNumber, { align: 'center' });

                doc.end();

                stream.on('finish', () => {
                    resolve({
                        filename,
                        filepath,
                        size: fs.statSync(filepath).size
                    });
                });

                stream.on('error', reject);

            } catch (error) {
                reject(error);
            }
        });
    }

    static async generateProducerCertificate(application, producer) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument({
                    size: 'A4',
                    margins: {
                        top: 50,
                        bottom: 50,
                        left: 50,
                        right: 50
                    }
                });

                const filename = `producer-cert-${application.applicationId}.pdf`;
                const filepath = path.join(__dirname, '../uploads', filename);
                const stream = fs.createWriteStream(filepath);

                doc.pipe(stream);

                // Header
                doc.fontSize(24)
                   .font('Helvetica-Bold')
                   .text('HYDROGEN PRODUCER CERTIFICATION', { align: 'center' });

                doc.moveDown(0.5);
                doc.fontSize(16)
                   .font('Helvetica')
                   .text('Certificate of Green Hydrogen Production', { align: 'center' });

                doc.moveDown(2);

                // Certificate Details
                doc.fontSize(14)
                   .font('Helvetica-Bold')
                   .text('Application ID:', 50, 150);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(application.applicationId, 200, 150);

                doc.moveDown(1);

                doc.fontSize(14)
                   .font('Helvetica-Bold')
                   .text('Issue Date:', 50);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(new Date(application.reviewNotes.approvedAt).toLocaleDateString(), 200);

                doc.moveDown(2);

                // Producer Details
                doc.fontSize(16)
                   .font('Helvetica-Bold')
                   .text('Producer Details', { underline: true });

                doc.moveDown(1);

                const producerDetails = [
                    ['Company Name:', producer.companyName || producer.name],
                    ['Contact Person:', producer.name],
                    ['Email:', producer.email],
                    ['Phone:', producer.phone || 'N/A']
                ];

                producerDetails.forEach(([label, value]) => {
                    doc.fontSize(12)
                       .font('Helvetica-Bold')
                       .text(label, 50);

                    doc.fontSize(12)
                       .font('Helvetica')
                       .text(value, 200);

                    doc.moveDown(0.5);
                });

                doc.moveDown(2);

                // Plant Details
                doc.fontSize(16)
                   .font('Helvetica-Bold')
                   .text('Plant Details', { underline: true });

                doc.moveDown(1);

                const plantDetails = [
                    ['Plant Capacity:', `${application.plantDetails.plantCapacity} ${application.plantDetails.capacityUnit}`],
                    ['Energy Source:', application.productionDetails.energySource],
                    ['Production Method:', application.productionDetails.productionMethod]
                ];

                plantDetails.forEach(([label, value]) => {
                    doc.fontSize(12)
                       .font('Helvetica-Bold')
                       .text(label, 50);

                    doc.fontSize(12)
                       .font('Helvetica')
                       .text(value, 200);

                    doc.moveDown(0.5);
                });

                doc.moveDown(2);

                // QR Code for verification (if we had a verification URL)
                if (transaction.verificationUrl) {
                    doc.fontSize(12)
                       .font('Helvetica-Bold')
                       .text('Scan to Verify Certificate:', 50);
                    
                    // If we had a QR code generation library, we would add it here
                    doc.fontSize(10)
                       .font('Helvetica')
                       .text(`Verification URL: ${transaction.verificationUrl}`, 50);
                    
                    doc.moveDown(1);
                }
                
                // Digital Documents
                if (application && application.documents && application.documents.length > 0) {
                    doc.fontSize(16)
                       .font('Helvetica-Bold')
                       .text('Supporting Documentation', { underline: true });
                    
                    doc.moveDown(1);
                    
                    doc.fontSize(12)
                       .font('Helvetica')
                       .text('The following documents were submitted as part of the certification process:');
                    
                    doc.moveDown(0.5);
                    
                    // List documents with links
                    application.documents.forEach((document, index) => {
                        doc.fontSize(10)
                           .font('Helvetica')
                           .text(`${index + 1}. ${document.fileName || 'Document ' + (index + 1)}`, 70);
                        
                        if (document.url) {
                            doc.fontSize(9)
                               .font('Helvetica')
                               .fillColor('blue')
                               .text(`View Document: ${document.url}`, 90)
                               .fillColor('black');
                        }
                        
                        doc.moveDown(0.5);
                    });
                    
                    doc.moveDown(1);
                }

                // Certification
                doc.fontSize(16)
                   .font('Helvetica-Bold')
                   .text('Certification Status', { underline: true });

                doc.moveDown(1);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text('This facility has been certified as a Green Hydrogen Producer by HydrogenCertify.');

                doc.moveDown(1);

                doc.fontSize(12)
                   .font('Helvetica')
                   .text(`Certification Date: ${new Date(application.reviewNotes.approvedAt).toLocaleDateString()}`);

                doc.moveDown(2);

                // Footer
                doc.fontSize(10)
                   .font('Helvetica')
                   .text('This certificate is issued by HydrogenCertify and authorizes the holder to sell certified green hydrogen on our marketplace.', { align: 'center' });

                doc.end();

                stream.on('finish', () => {
                    resolve({
                        filename,
                        filepath,
                        size: fs.statSync(filepath).size
                    });
                });

                stream.on('error', reject);

            } catch (error) {
                reject(error);
            }
        });
    }
}

module.exports = CertificateGenerator; 